#!/usr/bin/env bash
# This may be sourced by bash or zsh, shebang is just for filetype

#setup {{{1
if [ -z "$PROFILE_SOURCED" ]; then
  \. "$CONFIG_HOME/.profile"
fi

#history {{{1
export HISTSIZE=10000
export SAVEHIST=20000
export HISTFILE=~/.shell_history

#aliases and functions {{{1
#ls {{{2
ls_command() {
  if hash exa 2>/dev/null; then
    exa "$@"
  else
    ls --color=auto "$@"
  fi
}

alias l="ls_command"
alias ls="ls_command"
alias sl="ls_command"
alias ll="ls_command -l"
alias la="ls_command -a"
alias lla="ls_command -al"
alias lg="ls_command -l --git"
alias lgi="ls_command -l --git --git-ignore"
alias lt="ls_command -T"
alias lr="ls_command -R"

#docker {{{2
alias d_run_bind='docker run -it -v $HOME:$HOME -w $PWD'
alias d_run_w_bind='~/.d_run_w_bind.sh'
alias d_eval_2016='eval $(docker-machine env 2016)'
alias d_eval_unset='eval $(docker-machine env -u)'
alias d="docker"
alias dr="docker run"

#python {{{2
alias py='python3'
alias python='python3'
alias pip='pip3'
alias bp='bpython'

#generic {{{2
alias cs='cd'
alias o='xdg-open'
alias p='preview'
alias se='sudoedit'
alias so='source'
alias sr='sudo reboot'
alias calc='insect'
a='while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done &'
alias stime="$a"
alias di="disown %"
alias bgd="bg && disown %"
alias t='tail -f'
alias h='history'
alias to='htop'
alias si="du -hs * .[^.]* 2> /dev/null | sort -h"
alias rf="rm -rf"
alias tf="tail -f"
alias cr="cp -r"
alias sx="exec startx"
alias sudo='sudo '
alias xargs='xargs '
alias time='time '

if hash sshrc 2>/dev/null; then
  alias ssh='sshrc'
fi

alias dud='du -d 1 -h'
alias duf='du -sh *'
alias ffi="$FZF_DEFAULT_COMMAND"
alias fdi="$FZF_DIR_COMMAND"

env_editor() {
  eval "$EDITOR $*"
}

alias e='env_editor'

red_gap() {
  n=10

  if [ "$#" -gt 0 ]; then
    n=$1
  fi

  for ((i = 0; i < n; i++)); do
    printf '\e[48;5;196m RESET\n'
  done
  printf '\e[0m\n'
}

alias rgap='red_gap'

#git {{{2
mgs() {
  m_path=$(mgs_path "$@") && cd "$m_path"
}

alias mgsd='mgs -e ~ 4'

git_commit_all_submodules() {
  git_root=$(git rev-parse --show-toplevel)
  git config --file "$git_root/.gitmodules" --get-regexp path |
    awk -v gr="$git_root" '{ print gr "/" $2 }' | xargs git add
  git commit --message="Submodule update"
}
alias gcas='git_commit_all_submodules'

#slurm {{{2
if hash scancel 2>/dev/null; then
  alias cancel_all='scancel -u guest287'
fi

if hash squeue 2>/dev/null; then
  alias check='squeue -u guest287'
fi

#mounting flash drive {{{2
alias lm="lsblk"
alias am="udisksctl mount -b"

#cargo {{{2
alias c-update='cargo install-update -a'

#tar {{{2
alias onzt='tar xvf'
alias ot='tar xzvf'
create_tar() {
  name="$(basename "$2")"
  tar "$1" "$name.tar.gz" "$2"
}
alias ct='create_tar czvf'
alias cnzt='create_tar cvf'

#ros {{{2
#locus {{{3
alias lsb="roslaunch locus_sim base.launch robots:=1 lidar:=gpu"
alias lsa="roslaunch locus_sim autonomy.launch robots:=1"
alias lsv="rosrun locus_viz sim"
alias locus_source_base="source /opt/locusrobotics/hotdog/dev/ros1/setup.zsh"

#general {{{3
alias r="ros"

alias rbag="rosbag"
alias rc="roscore"
alias rdi="rosdiagnostic"
alias rgr="rosgraph"
alias rn="rosnode"
alias rp="rosparam"
alias rs="rosservice"
alias rt="rostopic"
alias rw="roswtf"

# fzf commands defined below
alias rcd="roscd"
alias rcdf="fzf_roscd"

alias rl="roslaunch"
alias rlf="fzf_roslaunch"

alias rr="rosrun"
alias rrf="fzf_rosrun"

alias rte="rostopic echo"
alias rtef="fzf_ros_topic_echo"

alias rti="rostopic info"
alias rtif="fzf_ros_topic_info"

alias rtl="rostopic list"

alias rne="rosnode info"
alias rnef="fzf_ros_node_info"

alias rnp="rosnode ping"
alias rnpf="fzf_ros_node_ping"

alias rnk="rosnode kill"
alias rnkf="fzf_ros_node_kill"

alias rnl="rosnode list"

alias cb="catkin build"
alias cbf="fzf_catkin_build_immediate"
alias cbef="fzf_catkin_build_edit"
alias rv="sudo pkill openvpn; (nohup openpyn us &> /dev/null &)"

catkin_full_make_package() {
  catkin build "$1"
  catkin build roslint_"$1"
  catkin build run_tests_"$1"
}

alias cfmp="catkin_full_make_package"

alias rclf="fzf_ros_clean"

alias rse='file=$(fd setup.zsh | fzf) && source $file'

ros_link_compile_commands_json() {
  for file in "$(catkin locate -b)"/*; do
    f_basename="$(basename "$file")"
    if [ "$f_basename" != "catkin_tools_prebuild" ]; then
      src_path="$(catkin locate -s)"
      f_path=$(fd -t f -F -p "$f_basename/package.xml" "$src_path" | head -n 1)
      # f_path=$(find "$src_path" -path "*$f_basename/package.xml" | head -n 1)
      if [[ -n $f_path ]]; then
        d_path=$(dirname "$f_path")
        ln -sf "$file/compile_commands.json" "$d_path"
      fi
    fi
  done
}
alias rlccj='ros_link_compile_commands_json'

set_ros_master_uri() {
  export ROS_MASTER_URI=http://$1:11311
}
alias rmu=set_ros_master_uri

#source ros setup to ensure tab completion works {{{1
if [ -n "${ROS_VERSION+x}" ]; then
  if [ -n "${ZSH_VERSION+x}" ]; then
    shell_used="zsh"
  elif [ -n "${BASH_VERSION+x}" ]; then
    shell_used="bash"
  else
    shell_used="sh"
  fi
  \. "$(cut -d':' -f1 <<<"$CMAKE_PREFIX_PATH")/setup.$shell_used"
fi

#fzf commands {{{1
# git {{{2
# easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
git_stash_fzf() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
      fzf --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b
  ); do
    mapfile -t out <<<"$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z $sha ]] && continue
    if [[ $k == 'ctrl-d' ]]; then
      git diff "$sha"
    elif [[ $k == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" "$sha"
      break
    else
      git stash show -p "$sha"
    fi
  done
}

alias gsf='git_stash_fzf'

# checkout git branch (including remote branches)
git_checkout_branch_fzf() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
    branch=$(echo "$branches" |
      fzf -d $((2 + $(wc -l <<<"$branches"))) +m) &&
    git checkout "$(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")"
}

alias gcobf='git_checkout_branch_fzf'

# checkout git branch/tag
git_checkout_fzf() {
  local tags branches target
  tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}'
  ) || return
  branches=$(
    git branch --all | grep -v HEAD |
      sed "s/.* //" | sed "s#remotes/[^/]*/##" |
      sort -u | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}'
  ) || return
  target=$(
    (
      echo "$tags"
      echo "$branches"
    ) |
      fzf -l30 -- --no-hscroll --ansi +m -d '\t' -n 2
  ) || return
  git checkout "$(echo "$target" | awk '{print $2}')"
}

alias gcof='git_checkout_fzf'

# checkout git commit
git_checkout_commit_fzf() {
  local commits commit
  commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
    commit=$(echo "$commits" | fzf --tac +s +m -e) &&
    git checkout "$(echo "$commit" | sed "s/ .*//")"
}

alias gcocf='git_checkout_commit_fzf'

# get git commit sha
# example usage: git rebase -i `gcsf`
git_commit_sha_fzf() {
  local commits commit
  commits=$(git log --color=always --oneline --reverse) &&
    commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
    echo -n "$(echo "$commit" | sed "s/ .*//")"
}

alias gcsf='git_commit_sha_fzf'

# misc {{{2
# utility function used to write the command in the shell
writecmd() {
  a='$TIOCSTI = 0x5412; $l = <STDIN>; $lc = $ARGV[0] eq "-run" ? "\n" :'
  b='""; $l =~ s/\s*$/$lc/; map { ioctl STDOUT, $TIOCSTI, $_; } split "", $l;'
  perl -e "$a$b"
}

# cd to selected parent directory
cd_parent_fzf() {
  local dirs
  get_parent_dirs() {
    if [[ -d ${1} ]]; then dirs+=("$1"); else return; fi
    if [[ ${1} == '/' ]]; then
      for _dir in "${dirs[@]}"; do echo "$_dir"; done
    else
      get_parent_dirs "$(dirname "$1")"
    fi
  }
  direc="$(get_parent_dirs "$(realpath "${1:-$(pwd)}")" | fzf --tac)"
  cd "$direc"
}

alias cdp='cd_parent_fzf'

# cd into the directory of the selected file
cd_file_fzf() {
  local file
  local dir
  file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

alias cdf='cd_file_fzf'

# show output of "ps -ef", use [tab] to select one or multiple entries
# press [enter] to kill selected processes and go back to the process list.
# or press [escape] to go back to the process list. Press [escape] twice to exit
# completely.
kill_process_fzf() {
  fzf_cmd="fzf ${FZF_DEFAULT_OPTS} -m --header='[kill:process]'"
  pid=$(ps -ef | sed 1d | eval "$fzf_cmd" | awk '{print $2}')

  if [ "x$pid" != "x" ]; then
    echo "$pid" | xargs kill -"${1:-9}"
    kill_process_fzf
  fi
}
alias kp=kill_process_fzf

# list directories in $PATH, press [enter] to list the executables inside.
# press [escape] to go back to directory listing, [escape] twice to exit
find_path_fzf() {
  fzf_cmd="fzf ${FZF_DEFAULT_OPTS} --header='[find:path]'"
  loc=$(echo "$PATH" | sed -e $'s/:/\\\n/g' | eval "$fzf_cmd")

  if [[ -d $loc ]]; then
    fzf_cmd="fzf ${FZF_DEFAULT_OPTS} --header='[find:exe] => ${loc}' >/dev/null"
    rg --files "$loc" | rev | cut -d"/" -f1 | rev | eval "$fzf_cmd"
    find_path_fzf
  fi
}

alias fp=find_path_fzf

# Paste the selected executable into the command line
fzf_executables() {
  a="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.."
  b=" --tiebreak=index --bind=ctrl-r:toggle-sort $FZF_CTRL_T_OPTS +m"
  fzf_cmd="$(__fzfcmd)"
  whence -pm "*" | FZF_DEFAULT_OPTS="$a$b" $fzf_cmd | writecmd
}

# ros {{{2
# Change this if you want your own rosbag play command
export FZF_ROSBAG_PLAY_COMMAND="rosbag play --pause --clock --hz=200 "
# Change this if you want your own rosbag play command
export FZF_ROSBAG_DIRS="$HOME"

#==============================================================================
# General ros tools

## roscd
fzf_roscd() {
  local package
  package=$(rospack list-names | fzf-tmux --query="$1" --select-1 --exit-0) &&
    roscd "$package"
}

## roslaunch
fzf_roslaunch() {
  find "$ROS_DIR_PATH" -type 'f' -name "*.launch" |
    fzf-tmux --query="$1" --select-1 --exit-0 |
    sed "s/^/roslaunch  /" | writecmd
}

## rosbag play
fzf_rosbag() {
  find "$FZF_ROSBAG_DIRS" -type 'f' -name "*.bag" |
    fzf-tmux --query="$1" --select-1 --exit-0 |
    sed 's/^/$FZF_ROSBAG_PLAY_COMMAND/' | writecmd
}

## Run executables like rosrun (but not really rosrun)
fzf_rosrun() {
  find "$ROS_DIR_PATH/devel/" "$ROS_DIR_PATH/src/" -executable -type 'f' |
    fzf-tmux --query="$1" --select-1 --exit-0 |
    sed "s/^//" | writecmd
}

#==============================================================================
# Topic related tools
## Echo a topic
fzf_ros_topic_echo() {
  rostopic list >/dev/null &&
    rostopic list | fzf-tmux --query="$1" --select-1 --exit-0 |
    sed "s/^/rostopic echo /" | writecmd
}

## Topic info
fzf_ros_topic_info() {
  local topic
  rostopic list >/dev/null &&
    topic=$(rostopic list | fzf-tmux --query="$1" --select-1 --exit-0) &&
    rostopic info "$topic"
}

#==============================================================================
# Node related tools
## Node info
fzf_ros_node_info() {
  local node
  rostopic list >/dev/null
  node=$(rosnode list | fzf-tmux --query="$1" --select-1 --exit-0) &&
    rosnode info "$node"
}

## Ping nodes
fzf_ros_node_ping() {
  local node
  rostopic list >/dev/null &&
    node=$(rosnode list | fzf-tmux --query="$1" --select-1 --exit-0) &&
    rosnode ping "$node"
}

## Kill nodes
fzf_ros_node_kill() {
  local node
  rostopic list >/dev/null &&
    node=$(rosnode list | fzf-tmux --query="$1" --select-1 --exit-0) &&
    rosnode kill "$node"
}

export CATKIN_BUILD_ARGS="-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"

#==============================================================================
# Build tools
## Build a package - start immediately on match
fzf_catkin_build_immediate() {
  local package
  package=$(rospack list-names | fzf-tmux --query="$1" --select-1 --exit-0) &&
    catkin build -w "$ROS_DIR_PATH" "$CATKIN_BUILD_ARGS" "$package"
}

## Build a package - prepare build command on command line for the user to
#  edit before starting a build
fzf_catkin_build_edit() {
  rospack list-names | fzf-tmux --query="$1" --select-1 --exit-0 |
    sed "s/^/catkin build -w $ROS_DIR_PATH $CATKIN_BUILD_ARGS /" | writecmd
}

## Clean packages
fzf_ros_clean() {
  local package
  package=$(rospack list-names | fzf-tmux --query="$1" --select-1 --exit-0)
  local rclean_build_path=$ROS_DIR_PATH/build/$package
  local rclean_devel_path=$ROS_DIR_PATH/devel/lib/$package
  if [ -d "$rclean_build_path" ]; then
    echo "Removing $rclean_build_path" &&
      rm -rf "$rclean_build_path" >/dev/null
  else
    echo "$rclean_build_path does not exist"
  fi
  if [ -d "$rclean_devel_path" ]; then
    echo "Removing $rclean_devel_path" &&
      rm -rf "$rclean_devel_path" >/dev/null
  else
    echo "$rclean_devel_path does not exist"
  fi
}

# apt {{{2
# install multiple packages at once
a="fzf ${FZF_DEFAULT_OPTS} -m "
b="--preview 'apt show \$(parse_packages {}) 2> /dev/null'"
base_apt_fzf_cmd="$a$b"

apt_install_package_fzf() {
  if [ "$1" == "-u" ]; then
    sudo apt update
  fi

  fzf_cmd="$base_apt_fzf_cmd --header='[apt:install]'"
  inst="$(parse_packages "$(apt list 2>/dev/null | tail -n +2 |
    eval "$fzf_cmd")")"

  if [[ -n $inst ]]; then
    sudo apt install "$inst"
  fi
}

alias aip=apt_install_package_fzf

apt_upgrade_package_fzf() {
  # upgrade multiple packages at once
  if [ "$1" == "-u" ]; then
    sudo apt update
  fi

  fzf_cmd="$base_apt_fzf_cmd --header='[apt:upgrade]'"
  upgr="$(parse_packages "$(apt list --upgradable 2>/dev/null | tail -n +2 |
    eval "$fzf_cmd")")"

  if [[ -n $upgr ]]; then
    sudo apt install --only-upgrade "$upgr"
  fi
}

alias aup=apt_upgrade_package_fzf

apt_remove_package_fzf() {
  fzf_cmd="$base_apt_fzf_cmd --header='[apt:remove]'"
  rem="$(parse_packages "$(apt list --installed 2>/dev/null | tail -n +2 |
    eval "$fzf_cmd")")"

  if [[ -n $rem ]]; then
    sudo apt remove "$rem"
  fi
}

alias arp=apt_remove_package_fzf

#thefuck (lazy loading) {{{1
if command -v thefuck >/dev/null 2>&1; then
  a='if type fuck_alias &>/dev/null; then; fuck_alias; else;'
  b=' eval "$(thefuck --alias fuck_alias)"; fuck_alias; fi'
  alias f="$a$b"
fi
#}}}

# vim: set fdm=marker filetype=sh:
