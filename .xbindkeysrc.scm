;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start of xbindkeys configuration ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-modules (ice-9 popen))
(use-modules (ice-9 rdelim))

(define (display-n str)
  "Display a string then newline"
  (display str)
  (newline))

(define make-binding-maker
  (lambda (callback)
    (lambda (binding)
      (xbindkey-function
	(car binding)
	(lambda ()
	  (if
	    (car (cdr (cdr binding)))
	    (run-command (car (cdr binding)))
	    (run-command (string-append "xvkbd -xsendevent -text '" (car (cdr binding)) "'")))
	  (callback))))))

(define enter-layer
  (lambda ()
    (ungrab-all-keys)
    (remove-all-keys)))

(define (layer-0)
  (display "layer 0")
  (enter-layer)
  (system "rm -f /tmp/sym_single_layer /tmp/function_single_layer /tmp/sym_lock_layer /tmp/function_lock_layer")
  (alt-standard-layer (lambda () '()))
  ; (capital-standard-layer (lambda () '()))
  (xbindkey-function '(m:0x0 c:66) layer-1-escape)
  (xbindkey-function '(Return) layer-1-return)
  (xbindkey-function '(Tab) layer-2-tab)
  (xbindkey-function '(bracketleft) layer-2-back)
  ; (xbindkey-function '(Shift_R) layer-1-single)
  ; (xbindkey-function '(Shift_L) layer-1-single)
  ; (xbindkey-function '(Alt_R) layer-2-single)
  ; (xbindkey-function '(Alt_L) layer-2-single)
  ((make-binding-maker layer-0) '((BackSpace) "xdotool key Caps_Lock" #t))
  (grab-all-keys))

(define  function-layer
  (lambda (callback)
    (map (make-binding-maker callback)
	 '(((q) "i3-msg workspace 1" #t)
	   ((w) "i3-msg workspace 2" #t)
	   ((e) "i3-msg workspace 3" #t)
	   ((r) "i3-msg workspace 4" #t)
	   ((t) "i3-msg workspace 5" #t)
	   ((y) "i3-msg move workspace 1" #t)
	   ((u) "i3-msg move workspace 2" #t)
	   ((i) "i3-msg move workspace 3" #t)
	   ((o) "i3-msg move workspace 4" #t)
	   ((p) "i3-msg move workspace 5" #t)
	   ((a) "\\[Prior]" #f)
	   ((s) "\\[Next]" #f)
	   ((d) "inc_vol" #t)
	   ((f) "dec_vol"#t)
	   ((g) "mute_vol"#t)
	   ((h) "\\[Left]" #f)
	   ((j) "\\[Down]" #f)
	   ((k) "\\[Up]" #f)
	   ((l) "\\[Right]" #f)
	   ((semicolon) "inc_bright" #t)
	   ((apostrophe) "dec_bright" #t)
	   ((z) "ryan_greenblatt@brown.edu" #f)
	   ((x) "greenblattryan@gmail.com" #f)
	   ((c) "rgreenblatt" #f)))))

(define capital-exec-layer
  (lambda (callback)
    (map (make-binding-maker callback)
	 '(((Shift q) "" #t)
	   ((Shift w) "" #t)
	   ((Shift e) "" #t)
	   ((Shift r) "" #t)
	   ((Shift t) "" #t)
	   ((Shift y) "" #t)
	   ((Shift u) "" #t)
	   ((Shift i) "" #t)
	   ((Shift o) "" #t)
	   ((Shift p) "" #t)
	   ((Shift a) "" #t)
	   ((Shift s) "" #t)
	   ((Shift d) "" #t)
	   ((Shift f) "" #t)
	   ((Shift g) "" #t)
	   ((Shift h) "" #t)
	   ((Shift j) "" #t)
	   ((Shift k) "" #t)
	   ((Shift l) "" #t)
	   ((Shift semicolon) "" #t)
	   ((Shift apostrophe) "" #t)
	   ((Shift z) "" #t)
	   ((Shift x) "" #t)
	   ((Shift c) "" #t)
	   ((Shift v) "" #t)
	   ((Shift b) "" #t)
	   ((Shift n) "" #t)
	   ((Shift m) "" #t)
	   ((Shift comma) "" #t)
	   ((Shift period) "" #t)
	   ((Shift slash) "" #t)))))

(define capital-standard-layer
  (lambda (callback)
    (map (make-binding-maker callback)
	 '(((Shift q) "Q" #f)
	   ((Shift w) "W" #f)
	   ((Shift e) "E" #f)
	   ((Shift r) "R" #f)
	   ((Shift t) "T" #f)
	   ((Shift y) "Y" #f)
	   ((Shift u) "U" #f)
	   ((Shift i) "I" #f)
	   ((Shift o) "O" #f)
	   ((Shift p) "P" #f)
	   ((Shift a) "A" #f)
	   ((Shift s) "S" #f)
	   ((Shift d) "D" #f)
	   ((Shift f) "F" #f)
	   ((Shift g) "G" #f)
	   ((Shift h) "H" #f)
	   ((Shift j) "J" #f)
	   ((Shift k) "K" #f)
	   ((Shift l) "L" #f)
	   ((Shift semicolon) ":" #f)
	   ((Shift apostrophe) "\"" #f)
	   ((Shift z) "Z" #f)
	   ((Shift x) "X" #f)
	   ((Shift c) "C" #f)
	   ((Shift v) "V" #f)
	   ((Shift b) "B" #f)
	   ((Shift n) "N" #f)
	   ((Shift m) "M" #f)
	   ((Shift comma) "<" #f)
	   ((Shift period) ">" #f)
	   ((Shift slash) "?" #f)))))

(define  alt-standard-layer
  (lambda (callback)
    (map (make-binding-maker callback)
	 '(; ((Alt Shift q) "\\AQ" #t)
	   ; ((Alt Shift w) "\\AW" #f)
	   ((Alt Shift e) "i3-msg exit" #t)
	   ((Alt Shift r) "i3-msg restart" #t)
	   ; ((Alt Shift t) "\\AT" #f)
	   ; ((Alt Shift y) "\\AY" #f)
	   ; ((Alt Shift u) "\\AU" #f)
	   ; ((Alt Shift i) "\\AI" #f)
	   ; ((Alt Shift o) "\\AO" #f)
	   ; ((Alt Shift p) "\\AP" #f)
	   ; ((Alt Shift a) "\\AQ" #f)
	   ; ((Alt Shift s) "\\AS" #f)
	   ; ((Alt Shift d) "\\AD" #f)
	   ; ((Alt Shift f) "\\AF" #f)
	   ; ((Alt Shift g) "\\AG" #f)
	   ((Alt Shift h) "i3-msg move right" #t)
	   ((Alt Shift j) "i3-msg move down" #t)
	   ((Alt Shift k) "i3-msg move up" #t)
	   ((Alt Shift l) "i3-msg move left" #t)
	   ((Alt Shift Right) "i3-msg move right" #t)
	   ((Alt Shift Down) "i3-msg move down" #t)
	   ((Alt Shift Up) "i3-msg move up" #t)
	   ((Alt Shift Left) "i3-msg move left" #t)
	   ; ((Alt Shift semicolon) "\\A:" #f)
	   ; ((Alt Shift apostrophe) "\\A\"" #f)
	   ; ((Alt Shift z) "\\AZ" #f)
	   ; ((Alt Shift x) "\\AX" #f)
	   ((Alt Shift c) "i3-msg reload" #t)
	   ((Alt Shift v) "vnc" #t)
	   ; ((Alt Shift b) "\\AB" #f)
	   ; ((Alt Shift n) "\\AN" #f)
	   ; ((Alt Shift m) "\\AM" #f)
	   ; ((Alt Shift comma) "\\A<" #f)
	   ; ((Alt Shift period) "\\A>" #f)
	   ; ((Alt Shift slash) "\\A?" #f)
	   ; ((Alt Shift space) "i3-msg floating toggle" #t)
	   ((Alt q) "i3-msg kill" #t)
	   ((Alt w) "i3-msg layout tabbed" #t)
	   ((Alt e) "i3-msg layout toggle split" #t)
	   ((Alt r) "i3-msg mode resize" #t)
	   ((Alt t) "i3-msg move workspace right" #t)
	   ; ((Alt y) "\\Ay" #f)
	   ((Alt u) "ranger_new_window" #t)
	   ; ((Alt i) "\\Ai" #f)
	   ; ((Alt o) "\\Ao" #f)
	   ((Alt p) "gnome-screenshot" #t)
	   ((Alt a) "i3-msg focus parent" #t)
	   ((Alt s) "i3-msg layout stacking" #t)
	   ((Alt d) "dmenu_run" #t)
	   ((Alt f) "i3-msg fullscreen toggle" #t)
	   ; ((Alt g) "\\Ag" #f)
	   ((Alt h) "i3_change_focus h" #t)
	   ((Alt j) "i3_change_focus j" #t)
	   ((Alt k) "i3_change_focus k" #t)
	   ((Alt l) "i3_change_focus l" #t)
	   ((Alt Left) "i3-msg focus left" #t)
	   ((Alt Down) "i3-msg focus down" #t)
	   ((Alt Up) "i3-msg focus up" #t)
	   ((Alt Right) "i3-msg focus right" #t)
	   ((Alt semicolon) "qutebrowser" #t)
	   ; ((Alt apostrophe) "\\A'" #f)
	   ; ((Alt z) "\\Az" #f)
	   ; ((Alt x) "\\Ax" #f)
	   ; ((Alt c) "\\Ac" #f)
	   ((Alt v) "i3-msg split v" #t)
	   ((Alt b) "i3-msg split h" #t)
	   ; ((Alt n) "\\An" #f)
	   ; ((Alt m) "\\Am" #f)
	   ; ((Alt comma) "\\A," #f)
	   ; ((Alt period) "\\A." #f)
	   ; ((Alt slash) "\\A/" #f)
	   ((Alt space) "focus mode_toggle" #t)
	   ((Alt Return) "i3-sensible-terminal -e nvim" #t)))))

(define  alt-exec-layer
  (lambda (callback)
    (map (make-binding-maker callback)
	 '(((Alt Shift q) "" #t)
	   ((Alt Shift w) "" #t)
	   ((Alt Shift e) "" #t)
	   ((Alt Shift r) "" #t)
	   ((Alt Shift t) "" #t)
	   ((Alt Shift y) "" #t)
	   ((Alt Shift u) "" #t)
	   ((Alt Shift i) "" #t)
	   ((Alt Shift o) "" #t)
	   ((Alt Shift p) "" #t)
	   ((Alt Shift a) "" #t)
	   ((Alt Shift s) "" #t)
	   ((Alt Shift d) "" #t)
	   ((Alt Shift f) "" #t)
	   ((Alt Shift g) "" #t)
	   ((Alt Shift h) "" #t)
	   ((Alt Shift j) "" #t)
	   ((Alt Shift k) "" #t)
	   ((Alt Shift l) "" #t)
	   ((Alt Shift Right) "" #t)
	   ((Alt Shift Down) "" #t)
	   ((Alt Shift Up) "" #t)
	   ((Alt Shift Left) "" #t)
	   ((Alt Shift semicolon) "" #t)
	   ((Alt Shift apostrophe) "" #t)
	   ((Alt Shift z) "" #t)
	   ((Alt Shift x) "" #t)
	   ((Alt Shift c) "" #t)
	   ((Alt Shift v) "" #t)
	   ((Alt Shift b) "" #t)
	   ((Alt Shift n) "" #t)
	   ((Alt Shift m) "" #t)
	   ((Alt Shift comma) "" #t)
	   ((Alt Shift period) "" #t)
	   ((Alt Shift slash) "" #t)
	   ((Alt Shift space) "" #t)
	   ((Alt q) "" #t)
	   ((Alt w) "" #t)
	   ((Alt e) "" #t)
	   ((Alt r) "" #t)
	   ((Alt t) "" #t)
	   ((Alt y) "" #t)
	   ((Alt u) "" #t)
	   ((Alt i) "" #t)
	   ((Alt o) "" #t)
	   ((Alt p) "" #t)
	   ((Alt a) "" #t)
	   ((Alt s) "" #t)
	   ((Alt d) "" #t)
	   ((Alt f) "" #t)
	   ((Alt g) "" #t)
	   ((Alt h) "" #t)
	   ((Alt j) "" #t)
	   ((Alt k) "" #t)
	   ((Alt l) "" #t)
	   ((Alt Left) "" #t)
	   ((Alt Down) "" #t)
	   ((Alt Up) "" #t)
	   ((Alt Right) "" #t)
	   ((Alt semicolon) "" #t)
	   ((Alt apostrophe) "" #t)
	   ((Alt z) "" #t)
	   ((Alt x) "" #t)
	   ((Alt c) "" #t)
	   ((Alt v) "" #t)
	   ((Alt b) "" #t)
	   ((Alt n) "" #t)
	   ((Alt m) "" #t)
	   ((Alt comma) "" #t)
	   ((Alt period) "" #t)
	   ((Alt slash) "" #t)
	   ((Alt space) "" #t)
	   ((Alt Return) "" #t)))))
(define  control-standard-layer
  (lambda (callback)
    (map (make-binding-maker callback)
	 '(((Control Shift q) "\\CQ" #f)
	   ((Control Shift w) "\\CW" #f)
	   ((Control Shift e) "\\CE" #f)
	   ((Control Shift r) "\\CR" #f)
	   ((Control Shift t) "\\CT" #f)
	   ((Control Shift y) "\\CY" #f)
	   ((Control Shift u) "\\CU" #f)
	   ((Control Shift i) "\\CI" #f)
	   ((Control Shift o) "\\CO" #f)
	   ((Control Shift p) "\\CP" #f)
	   ((Control Shift a) "\\CQ" #f)
	   ((Control Shift s) "\\CS" #f)
	   ((Control Shift d) "\\CD" #f)
	   ((Control Shift f) "\\CF" #f)
	   ((Control Shift g) "\\CG" #f)
	   ((Control Shift h) "\\CH" #f)
	   ((Control Shift j) "\\CJ" #f)
	   ((Control Shift k) "\\CK" #f)
	   ((Control Shift l) "\\CL" #f)
	   ((Control Shift semicolon) "\\C:" #f)
	   ((Control Shift apostrophe) "\\C\"" #f)
	   ((Control Shift z) "\\CZ" #f)
	   ((Control Shift x) "\\CX" #f)
	   ((Control Shift c) "\\CC" #f)
	   ((Control Shift v) "\\CV" #f)
	   ((Control Shift b) "\\CB" #f)
	   ((Control Shift n) "\\CN" #f)
	   ((Control Shift m) "\\CM" #f)
	   ((Control Shift comma) "\\C<" #f)
	   ((Control Shift period) "\\C>" #f)
	   ((Control Shift slash) "\\C?" #f)
	   ((Control q) "\\Cq" #f)
	   ((Control w) "\\Cw" #f)
	   ((Control e) "\\Ce" #f)
	   ((Control r) "\\Cr" #f)
	   ((Control t) "\\Ct" #f)
	   ((Control y) "\\Cy" #f)
	   ((Control u) "\\Cu" #f)
	   ((Control i) "\\Ci" #f)
	   ((Control o) "\\Co" #f)
	   ((Control p) "\\Cp" #f)
	   ((Control a) "\\Cq" #f)
	   ((Control s) "\\Cs" #f)
	   ((Control d) "\\Cd" #f)
	   ((Control f) "\\Cf" #f)
	   ((Control g) "\\Cg" #f)
	   ((Control h) "\\Ch" #f)
	   ((Control j) "\\Cj" #f)
	   ((Control k) "\\Ck" #f)
	   ((Control l) "\\Cl" #f)
	   ((Control semicolon) "\\C;" #f)
	   ((Control apostrophe) "\\C\"" #f)
	   ((Control z) "\\Cz" #f)
	   ((Control x) "\\Cx" #f)
	   ((Control c) "\\Cc" #f)
	   ((Control v) "\\Cv" #f)
	   ((Control b) "\\Cb" #f)
	   ((Control n) "\\Cn" #f)
	   ((Control m) "\\Cm" #f)
	   ((Control comma) "\\C," #f)
	   ((Control period) "\\C." #f)
	   ((Control slash) "\\C/" #f)))))

(define standard-layer
  (lambda (callback)
    (map (make-binding-maker callback)
	 '(((q) "q" #f)
	   ((w) "w" #f)
	   ((e) "e" #f)
	   ((r) "r" #f)
	   ((t) "t" #f)
	   ((y) "y" #f)
	   ((u) "u" #f)
	   ((i) "i" #f)
	   ((o) "o" #f)
	   ((p) "p" #f)
	   ((a) "q" #f)
	   ((s) "s" #f)
	   ((d) "d" #f)
	   ((f) "f" #f)
	   ((g) "g" #f)
	   ((h) "h" #f)
	   ((j) "j" #f)
	   ((k) "k" #f)
	   ((l) "l" #f)
	   ((semicolon) ";" #f)
	   ((apostrophe) "'" #f)
	   ((z) "z" #f)
	   ((x) "x" #f)
	   ((c) "c" #f)
	   ((v) "v" #f)
	   ((b) "b" #f)
	   ((n) "n" #f)
	   ((m) "m" #f)
	   ((comma) "," #f)
	   ((period) "." #f)
	   ((slash) "/" #f)))))

(define  sym-layer
  (lambda (callback)
    (map (make-binding-maker callback)
	 '(((q) "1" #f)
	   ((w) "2" #f)
	   ((e) "3" #f)
	   ((r) "4" #f)
	   ((t) "5" #f)
	   ((y) "6" #f)
	   ((u) "7" #f)
	   ((i) "8" #f)
	   ((o) "9" #f)
	   ((p) "0" #f)
	   ((a) "!" #f)
	   ((s) "@" #f)
	   ((d) "#" #f)
	   ((f) "$" #f)
	   ((g) "%" #f)
	   ((h) "^" #f)
	   ((j) "&" #f)
	   ((k) "*" #f)
	   ((l) "(" #f)
	   ((semicolon) ")" #f)
	   ((apostrophe) "\\[bar]" #f)
	   ((z) "~" #f)
	   ((x) "\\\\" #f)
	   ((c) "-" #f)
	   ((v) "+" #f)
	   ((b) "=" #f)
	   ((n) "[" #f)
	   ((m) "]" #f)
	   ((comma) "{" #f)
	   ((period) "}" #f)
	   ((slash) "_" #f)
	   ((bracketleft) "\\[BackSpace]" #f)
	   ((Control_R) "`" #f)
	   ((Control_L) "`" #f)))))

(define enter-sym-lock-layer
  (lambda ()
    (system "touch /tmp/sym_lock_layer")))

(define enter-function-lock-layer
  (lambda ()
    (system "touch /tmp/function_lock_layer")))

(define enter-sym-single-layer
  (lambda ()
    (system "touch /tmp/sym_single_layer")))

(define enter-function-single-layer
  (lambda ()
    (system "touch /tmp/function_single_layer")))

(define (layer-1-single)
  (display "layer 1 single")
  (enter-layer)
  (enter-sym-single-layer)
  (sym-layer layer-0)
  (capital-exec-layer layer-0)
  (alt-exec-layer layer-0)
  (control-standard-layer layer-0)
  ((make-binding-maker layer-0) '((bracketleft) "\\[BackSpace]" #f))
  ((make-binding-maker layer-0) '((m:0x0 c:66) "\\[Escape]" #f))
  (grab-all-keys))

(define (layer-2-single)
  (display "layer 2 single")
  (enter-layer)
  (enter-function-single-layer)
  (function-layer layer-0)
  (capital-exec-layer layer-0)
  (alt-exec-layer layer-0)
  (control-standard-layer layer-0)
  ((make-binding-maker layer-0) '((bracketleft) "\\[BackSpace]" #f))
  ((make-binding-maker layer-0) '((m:0x0 c:66) "\\[Escape]" #f))
  (grab-all-keys))

(define (layer-1-escape)
  (display "layer 1 escape")
  (enter-layer)
  (sym-layer
    (lambda ()
      (remove-xbindkey '(release m:0x0 c:66))
      (xbindkey-function '(release m:0x0 c:66) layer-0)))
  (xbindkey-function '(Shift_R) layer-1-toggle)
  ((make-binding-maker layer-0) '((release m:0x0 c:66) "\\[Escape]" #f))
  (grab-all-keys))

(define (layer-1-return)
  (display "layer 1 return")
  (enter-layer)
  (sym-layer
    (lambda ()
      (remove-xbindkey '(release Return))
      (xbindkey-function '(release Return) layer-0)))
  (xbindkey-function '(Shift_L) layer-1-toggle)
  ((make-binding-maker layer-0) '((release Return) "\\[Return]" #f))
  (grab-all-keys))

(define (layer-2-tab)
  (display "layer 2 tab")
  (enter-layer)
  (function-layer
    (lambda ()
      (remove-xbindkey '(release Tab))
      (xbindkey-function '(release Tab) layer-0)))
  (xbindkey-function '(Shift_R) layer-2-toggle)
  ((make-binding-maker layer-0) '((release Tab) "\\[Tab]" #f))
  (grab-all-keys))

(define (layer-2-back)
  (display "layer 2 back")
  (enter-layer)
  (function-layer
    (lambda ()
      (remove-xbindkey '(release bracketleft))
      (xbindkey-function '(release bracketleft) layer-0)))
  (xbindkey-function '(Shift_L) layer-2-toggle)
  ((make-binding-maker layer-0) '((release bracketleft) "\\[BackSpace]" #f))
  (grab-all-keys))

(define (layer-1-toggle)
  (display "layer 1 toggle")
  (enter-layer)
  (sym-layer (lambda () '()))
  ((make-binding-maker  (lambda () '())) '((bracketleft) "\\[BackSpace]" #f))
  (xbindkey-function '(Alt_L) layer-0)
  (xbindkey-function '(Alt_R) layer-0)
  (xbindkey-function '(Shift_L) single-normal-layer-1)
  (xbindkey-function '(Shift_R) single-normal-layer-1)
  (grab-all-keys))

(define (layer-2-toggle)
  (display "layer 1 toggle")
  (enter-layer)
  (function-layer (lambda () '()))
  ((make-binding-maker  (lambda () '())) '((bracketleft) "\\[BackSpace]" #f))
  (xbindkey-function '(Alt_L) layer-0)
  (xbindkey-function '(Alt_R) layer-0)
  (xbindkey-function '(Shift_L) single-normal-layer-2)
  (xbindkey-function '(Shift_R) single-normal-layer-2)
  (grab-all-keys))

(define (single-normal-layer-1)
  (display "layer 0 single (for toggle 1)")
  (enter-layer)
  (standard-layer layer-1-toggle)
  (grab-all-keys))

(define (single-normal-layer-2)
  (display "layer 0 single (for toggle 1)")
  (enter-layer)
  (standard-layer layer-2-toggle)
  (grab-all-keys))

(layer-0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; End of xbindkeys configuration ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;k;
