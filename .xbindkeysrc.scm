;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start of xbindkeys configuration ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-modules (ice-9 popen))
(use-modules (ice-9 rdelim))

(define (display-n str)
  "Display a string then newline"
  (display str)
  (newline))

(define make-binding-maker
  (lambda (callback)
    (lambda (binding)
      (xbindkey-function
	(car binding)
	(lambda ()
	  (if
	    (car (cdr (cdr binding)))
	    (run-command (car (cdr binding)))
	    (run-command (string-append "xvkbd -xsendevent -text '" (car (cdr binding)) "'")))
	  (callback))))))

(define i3-binding
  (lambda (key dir)
    (xbindkey-function
      key
      (lambda ()
	(if
	  (string=? (let* ((port (open-input-pipe "xdotool getwindowname $(xdotool getwindowfocus)"))
			   (str  (read-line port)))
		      (close-pipe port)
		      str)
		    "nvim")
	  (run-command (string-append "xvkbd -xsendevent -text '\\C\\\\\\Cngz" dir "'"))
	  (run-command "i3-msg focus right"))))))

(define (layer-0)
  (display "layer 0")
  (ungrab-all-keys)
  (remove-all-keys)
  ;i3 + vim integration
  (i3-binding '(Alt h) "h")
  (i3-binding '(Alt j) "j")
  (i3-binding '(Alt k) "k")
  (i3-binding '(Alt l) "l")
  ((make-binding-maker (lambda () '())) '((Shift m:0x0 c:66) "\\[Escape]\\[Escape]\\[Escape]" #f))
  ((make-binding-maker (lambda () '())) '((Shift Return) "\\[Return]\\[Return]\\[Return]" #f))
  ((make-binding-maker (lambda () '())) '((Shift Tab) "\\[Tab]\\[Tab]\\[Tab]" #f))
  ((make-binding-maker (lambda () '())) '((Shift bracketleft) "\\[BackSpace]\\[BackSpace]\\[BackSpace]" #f))
  (xbindkey-function '(m:0x0 c:66) layer-1-escape)
  (xbindkey-function '(Return) layer-1-return)
  (xbindkey-function '(Tab) layer-2-tab)
  (xbindkey-function '(bracketleft) layer-2-back)
  (grab-all-keys))

(define  function-layer
  (lambda (callback)
    (map (make-binding-maker callback)
	 '(((q) "i3-msg workspace 1" #t)
	   ((w) "i3-msg workspace 2" #t)
	   ((e) "i3-msg workspace 3" #t)
	   ((r) "i3-msg workspace 4" #t)
	   ((t) "i3-msg workspace 5" #t)
	   ((y) "i3-msg move workspace 1" #t)
	   ((u) "i3-msg move workspace 2" #t)
	   ((i) "i3-msg move workspace 3" #t)
	   ((o) "i3-msg move workspace 4" #t)
	   ((p) "i3-msg move workspace 5" #t)
	   ((a) "\\[Prior]" #f)
	   ((s) "\\[Next]" #f)
	   ((d) "inc_vol" #t)
	   ((f) "dec_vol"#t)
	   ((g) "mute_vol"#t)
	   ((h) "\\[Left]" #f)
	   ((j) "\\[Down]" #f)
	   ((k) "\\[Up]" #f)
	   ((l) "\\[Right]" #f)
	   ((semicolon) "inc_bright" #t)
	   ((apostrophe) "dec_bright" #t)
	   ((z) "ryan_greenblatt@brown.edu" #f)
	   ((z) "greenblattryan@gmail.com" #f)
	   ((x) "rgreenblatt" #f)
	   
	   ))))

(define  alt-sym-layer
  (lambda (callback)
    (map (make-binding-maker callback)
	 '(((Alt q) "1" #f)
	   ((Alt w) "2" #f)
	   ((Alt e) "3" #f)
	   ((Alt r) "4" #f)
	   ((Alt t) "5" #f)
	   ((Alt y) "6" #f)
	   ((Alt u) "7" #f)
	   ((Alt i) "8" #f)
	   ((Alt o) "9" #f)
	   ((Alt p) "0" #f)
	   ((Alt a) "!" #f)
	   ((Alt s) "@" #f)
	   ((Alt d) "#" #f)
	   ((Alt f) "$" #f)
	   ((Alt g) "%" #f)
	   ((Alt h) "^" #f)
	   ((Alt j) "&" #f)
	   ((Alt k) "*" #f)
	   ((Alt l) "(" #f)
	   ((Alt semicolon) ")" #f)
	   ((Alt apostrophe) "\\[bar]" #f)
	   ((Alt z) "~" #f)
	   ((Alt x) "\\\\" #f)
	   ((Alt c) "-" #f)
	   ((Alt v) "+" #f)
	   ((Alt b) "=" #f)
	   ((Alt n) "[" #f)
	   ((Alt m) "]" #f)
	   ((Alt comma) "{" #f)
	   ((Alt period) "}" #f)
	   ((Alt slash) "_" #f)))))

(define  sym-layer
  (lambda (callback)
    (map (make-binding-maker callback)
	 '(((q) "1" #f)
	   ((w) "2" #f)
	   ((e) "3" #f)
	   ((r) "4" #f)
	   ((t) "5" #f)
	   ((y) "6" #f)
	   ((u) "7" #f)
	   ((i) "8" #f)
	   ((o) "9" #f)
	   ((p) "0" #f)
	   ((a) "!" #f)
	   ((s) "@" #f)
	   ((d) "#" #f)
	   ((f) "$" #f)
	   ((g) "%" #f)
	   ((h) "^" #f)
	   ((j) "&" #f)
	   ((k) "*" #f)
	   ((l) "(" #f)
	   ((semicolon) ")" #f)
	   ((apostrophe) "\\[bar]" #f)
	   ((z) "~" #f)
	   ((x) "\\\\" #f)
	   ((c) "-" #f)
	   ((v) "+" #f)
	   ((b) "=" #f)
	   ((n) "[" #f)
	   ((m) "]" #f)
	   ((comma) "{" #f)
	   ((period) "}" #f)
	   ((slash) "_" #f)))))

(define (layer-1-escape)
  (display "layer 1 escape")
  (ungrab-all-keys)
  (remove-all-keys)
  (sym-layer
    (lambda ()
      (remove-xbindkey '(release m:0x0 c:66))
      (xbindkey-function '(release m:0x0 c:66) layer-0)))
  (xbindkey-function '(space) layer-1-single)
  (xbindkey-function '(Shift_R) layer-1-toggle)
  ((make-binding-maker layer-0) '((release m:0x0 c:66) "\\[Escape]" #f))
  (grab-all-keys))

(define (layer-1-return)
  (display "layer 1 return")
  (ungrab-all-keys)
  (remove-all-keys)
  (sym-layer
    (lambda ()
      (remove-xbindkey '(release Return))
      (xbindkey-function '(release Return) layer-0)))
  (xbindkey-function '(space) layer-1-single)
  (xbindkey-function '(Shift_L) layer-1-toggle)
  ((make-binding-maker layer-0) '((release Return) "\\[Return]" #f))
  (grab-all-keys))

(define (layer-2-tab)
  (display "layer 2 tab")
  (ungrab-all-keys)
  (remove-all-keys)
  (function-layer
    (lambda ()
      (remove-xbindkey '(release Tab))
      (xbindkey-function '(release Tab) layer-0)))
  (xbindkey-function '(space) layer-2-single)
  (xbindkey-function '(Shift_R) layer-2-toggle)
  ((make-binding-maker layer-0) '((release Tab) "\\[Tab]" #f))
  (grab-all-keys))

(define (layer-2-back)
  (display "layer 2 back")
  (ungrab-all-keys)
  (remove-all-keys)
  (function-layer
    (lambda ()
      (remove-xbindkey '(release bracketleft))
      (xbindkey-function '(release bracketleft) layer-0)))
  (xbindkey-function '(space) layer-2-single)
  (xbindkey-function '(Shift_L) layer-2-toggle)
  ((make-binding-maker layer-0) '((release bracketleft) "\\[BackSpace]" #f))
  (grab-all-keys))

(define (layer-1-single)
  (display "layer 1 single")
  (ungrab-all-keys)
  (remove-all-keys)
  (sym-layer layer-0)
  (grab-all-keys))

(define (layer-1-toggle)
  (display "layer 1 toggle")
  (ungrab-all-keys)
  (remove-all-keys)
  (sym-layer (lambda () '()))
  ((make-binding-maker  (lambda () '())) '((bracketleft) "\\[BackSpace]" #f))
  (xbindkey-function '(Alt_L) layer-0)
  (xbindkey-function '(Alt_R) layer-0)
  (grab-all-keys))

(define (layer-2-single)
  (display "layer 1 single")
  (ungrab-all-keys)
  (remove-all-keys)
  (function-layer layer-0)
  (grab-all-keys))


(define (layer-2-toggle)
  (display "layer 1 toggle")
  (ungrab-all-keys)
  (remove-all-keys)
  (function-layer (lambda () '()))
  ((make-binding-maker  (lambda () '())) '((bracketleft) "\\[BackSpace]" #f))
  (xbindkey-function '(Alt_L) layer-0)
  (xbindkey-function '(Alt_R) layer-0)
  (grab-all-keys))

(layer-0)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; End of xbindkeys configuration ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;k;
